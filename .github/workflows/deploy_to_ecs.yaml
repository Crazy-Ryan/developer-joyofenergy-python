name: Deploy to ECS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: ${{ inputs.environment }}

    env:
      API_KEY: "" # This will be set below

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Development Secret
        if: inputs.environment == 'development'
        run: |
          echo "ECS_HOST=${{ secrets.DEV_ECS_HOST }}" >> $GITHUB_ENV
          echo "ECS_SSH_KEY=${{ secrets.DEV_ECS_SSH_KEY }}" >> $GITHUB_ENV

      - name: Set Staging Secret
        if: inputs.environment == 'staging'
        run: |
          echo "ECS_HOST=${{ secrets.STG_ECS_HOST }}" >> $GITHUB_ENV
          echo "ECS_SSH_KEY=${{ secrets.STG_ECS_SSH_KEY }}" >> $GITHUB_ENV

      - name: Set Production Secret
        if: inputs.environment == 'production'
        run: |
          echo "ECS_HOST=${{ secrets.PROD_ECS_HOST }}" >> $GITHUB_ENV
          echo "ECS_SSH_KEY=${{ secrets.PROD_ECS_SSH_KEY }}" >> $GITHUB_ENV

      - name: Build and Deploy
        run: |
          echo "Deploying to the ${{ inputs.environment }} environment..."
          echo "Using API Key: $API_KEY"

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ECS_SSH_KEY }}

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Deploy Container
        env:
          ECS_HOST: ${{ secrets.ECS_HOST }}
          IMAGE_URI: '${{ secrets.ACR_REGISTRY }}/crazy_ryan/joy-of-energy:latest'
        run: |
          ssh -o StrictHostKeyChecking=no root@$ECS_HOST << EOF
          docker pull $IMAGE_URI
          docker stop app || true
          docker rm app || true
          docker run -d --name app -p 8020:8020 $IMAGE_URI
          EOF
